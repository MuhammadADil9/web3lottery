





97802776641483268026869314607947010537980447778541042774586935978233989077328
subscription id 

vrfCordinator Address 
0x9DdfaCa8183c41ad55329BdeeD9F6A8d53168B1B


wallet address 
0x83c549cc62fed4798545d945dafb597186981e9c

link token contract address 
0x779877A7B0D9E8603169DdbD7836e478b4624789



While creating the subscription ID programattically 
how I will be able to fund the contract. 
How I will be able to fetch the same ID to use in the subscription manager? 
How to reset the array 


PUSING myself forward

added the functionality 


//completing the task
//adding the front end
//learning blogs
//emglish





// orcale are network of nodeoperators that    provide services to the blockchain 
// These are de-centralized oracle network
// types it include such as 
// on-chain
// off-chain
// compute-embeded oracle



// Oracle Request and receive cycle 
// creating a subscription programmatically 
// SubscriptionManager contract
// the contract creating the subcription will add itself to the consumer programmatically. 
Call topUpSubscription from the VRFv2PlusSubscriptionManager contract. This function uses the LINK token contract's transferAndCall function to fund your new subscription



Wallet address:
0x83c549cc62fed4798545d945dafb597186981e9c

vrf cordinator address  for sepolia 
0x9DdfaCa8183c41ad55329BdeeD9F6A8d53168B1B

called on vrfcordinator contract for creating the subscription 
> Create Subscription
for funding the subscription with native coin
> Fund Subscription With Native


subscription ID
41153822692417430952338374719626360880140964354581988556926204634749688928585 with 0.8ETH

subscription ID
97802776641483268026869314607947010537980447778541042774586935978233989077328 with 6 Link




address vrfCoordinator = 0x9DdfaCa8183c41ad55329BdeeD9F6A8d53168B1B;
bytes32 s_keyHash = 0x787d74caea10b2b357790d5b5247c2f63d1d91572a9846f780606e4d953677ae;
uint32 callbackGasLimit = 40000;
uint16 requestConfirmations = 3;
 =  1;


//realworld 
> mainnet & testnet same script latest
> for mock for testing the contract locally



is this possible for a conract having a external function and it is being called by contract that inherited it ?

chainlink automation pre-req requires 677 standard token to be implemented 

// there are three type of jobs on behalf of which chainlink automation triggers it self
> time base triggers
> custom logic trigger 
> log data trigger 

// of chain chainlink networks checks constantly that if there is need to perform upkeep
// if the condition is met then signed report is sent to register that which conditions to provoke and finally the desired functions are called in the upkeep contract onchian


// what is the difference between memory and calldata 
// why is a interface used in solidty ? 


requirements for registering the upkeep 

> contract must be automation compatible meaning that it should has the function checkupkeep and performupkeep
> contract must hold sufficient amount of balance to itself
> contract must have the address of linkToken and automation registry address 

how the it will happen 

contract will initilize the addresses of link token address and automation registrar address 
after that it will pay the automation contract for fetching the balance 
after that it will registar the contract with a struct parameter defing what type of the autoamtion it will require 









how subscription is being created ?

called the function of create subscription on the vrf cordinator 


how subscription is being funded ? 

with the help of transfer and call in link token address 


so basically these things are happening on chain and we just simply want to copy these on our local anvil chain 




//scripts are used for contract deployments along with additional arguments if they exist. 

//Now to identify that everything goes well we need tests

 
